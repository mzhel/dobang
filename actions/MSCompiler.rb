class MSCompiler	def initialize			@opts = {}		end		def Includes(rawStr)			r = ""				rawStr.split(";").each do |i|					r << %Q{/I "#{i}" }				end				r		end		def Defines(rawStr)			r = ""				rawStr.split(" ").each do |d|					r << %Q{/D "#{d}" }				end				r		end		def CompilerString(opts)			r = "cl "				opts.each do |opt|					case opt[0]							when "DEFINE"									r << Defines(opt[1])									when "INCLUDE"									r << Includes(opt[1])						end				end				r		end		#	# Callbacks from core	#		def Opt(key, name, value)			@opts[key] = [] if !@opts[key]				@opts[key] << [name, value]		end		def Do(key)			str = CompilerString(@opts[key])			puts str			out %x[#{str}]			endend