class MSCompiler	def initialize			@opts = {}		end		def TouchDir(name)			begin					Dir.mkdir(dir_name)				rescue				end			end		def Sources(rawStr)			r = ""				lst = []				rawStr.split(" ").each do |s|					r << %Q{#{s} }						lst << s				end				SetVar(:sources, lst)				r		end		def Keys(rawStr)			r = ""				rawStr.split(";").each do |k|					r << %Q{#{k} }				end				r		end		def Includes(rawStr)			r = ""				rawStr.split(";").each do |i|					r << %Q{/I "#{i}" }				end				r		end		def Defines(rawStr)			r = ""				rawStr.split(" ").each do |d|					r << %Q{/D "#{d}" }				end				r		end		def CompilerString(opts)			r = "cl "				opts.each do |opt|					case opt[0]							when "DEFINE"									r << Defines(opt[1])									when "INCLUDE"									r << Includes(opt[1])								when "KEYS"									r << Keys(opt[1])									when "OBJDIR"										TouchDir(opt[1])														r << "/Fo#{opt[1]} "									when "PDBDIR"									TouchDir(opt[1])									r << "/Fd#{opt[1]} "									when "SOURCES"									r << Sources(opt[1])						end				end				r		end		#	# Callbacks from core	#		def Opt(name, value)			key = :default			@opts[key] = [] if !@opts[key]				@opts[key] << [name, value]		end		def Do()			str = CompilerString(@opts[:default])			puts str			out %x[#{str}]				# [TODO] Check compiler call result.					endend